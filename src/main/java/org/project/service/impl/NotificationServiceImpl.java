package org.project.service.impl;

import lombok.RequiredArgsConstructor;
import org.project.entity.AppointmentEntity;
import org.project.entity.NotificationEntity;
import org.project.entity.PatientEntity;
import org.project.entity.UserEntity;
import org.project.repository.AppointmentRepository;
import org.project.repository.NotificationRepository;
import org.project.repository.PatientRepository;
import org.project.repository.UserRepository;
import org.project.service.EmailService;
import org.project.service.NotificationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@RequiredArgsConstructor
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepository;
    private final UserRepository userRepository;
    private final PatientRepository patientRepository;
    private final EmailService emailService;
    private final AppointmentRepository appointmentRepository;

    private static final Logger log = LoggerFactory.getLogger(NotificationServiceImpl.class);

    // Tr·∫£ danh s√°ch th√¥ng b√°o c·ªßa user (d√πng cho giao di·ªán web)
    @Override
    public List<NotificationEntity> getAllByUserId(Long userId) {
        return notificationRepository.findByUserEntity_IdOrderByCreatedAtDesc(userId);
    }


    // T·∫°o m·ªôt th√¥ng b√°o trong DB (hi·ªán tr√™n web)
    @Override
    public NotificationEntity send(UserEntity user, String title, String content) {
        NotificationEntity notification = NotificationEntity.builder()
                .userEntity(user)
                .title(title)
                .content(content)
                .createdAt(LocalDateTime.now())
                .build();
        return notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o ( email)
    @Override
    public void sendNotification(Long userId, String title, String content) {
        // L·∫•y user
        UserEntity user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        // L∆∞u th√¥ng b√°o cho web
        send(user, title, content);

        // T√¨m t·∫•t c·∫£ b·ªánh nh√¢n m√† user ƒëang s·ªü h·ªØu
        List<PatientEntity> patientList = patientRepository.findByUserEntity_Id(userId);

        // G·ª≠i email cho ch√≠nh user
        if (user.getEmail() != null && !user.getEmail().isBlank()) {
            emailService.sendEmail(user.getEmail(), title, content);
        }

        // G·ª≠i email ƒë·∫øn t·ª´ng b·ªánh nh√¢n (n·∫øu c√≥ email)
        for (PatientEntity patient : patientList) {
            if (patient.getEmail() != null && !patient.getEmail().isEmpty()) {
                emailService.sendEmail(patient.getEmail(), title, content);
            }
        }
    }

    @Override
    public void sendAppointmentNotification(Long appointmentId) {
        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));

        String content = buildAppointmentContent(appt, "X√°c nh·∫≠n l·ªãch h·∫πn",
                "üîî B·ªánh nh√¢n %s ƒë√£ ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© %s v√†o l√∫c %s.");

        sendNotification(appt.getPatientEntity().getUserEntity().getId(), "üîî X√°c nh·∫≠n l·ªãch h·∫πn", content);
    }

    @Override
    public void sendAppointmentChangeNotification(Long appointmentId) {
        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));

        String content = buildAppointmentContent(appt, "L·ªãch h·∫πn ƒë√£ thay ƒë·ªïi",
                "üîÑ L·ªãch h·∫πn c·ªßa b·ªánh nh√¢n %s v·ªõi b√°c sƒ© %s ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Th·ªùi gian m·ªõi: %s.");

        sendNotification(appt.getPatientEntity().getUserEntity().getId(), "üîÑ L·ªãch h·∫πn ƒë√£ thay ƒë·ªïi", content);
    }

    @Override
    public void sendAppointmentCancelNotification(Long appointmentId) {
        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));

        String content = buildAppointmentContent(appt,"L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy",
                "üö´ L·ªãch h·∫πn c·ªßa b·ªánh nh√¢n %s v·ªõi b√°c sƒ© %s v√†o l√∫c %s ƒë√£ b·ªã h·ªßy.");

        sendNotification(appt.getPatientEntity().getUserEntity().getId(), "üö´ L·ªãch h·∫πn b·ªã h·ªßy", content);
    }

    @Scheduled(cron = "0 0 8 * * *")
    public int sendTomorrowAppointmentReminders() {
        LocalDateTime tomorrowStart = LocalDate.now().plusDays(1).atStartOfDay();
        LocalDateTime tomorrowEnd = tomorrowStart.plusDays(1).minusSeconds(1);

        List<AppointmentEntity> appts = appointmentRepository.findByStartTimeBetween(tomorrowStart, tomorrowEnd);

        int count = 0;

        for (AppointmentEntity appt : appts) {
            try {
                String content = buildAppointmentContent(appt, "üìÖ Nh·∫Øc l·ªãch kh√°m",
                        "üìÖ Nh·∫Øc nh·ªü: L·ªãch kh√°m c·ªßa b·ªánh nh√¢n %s v·ªõi b√°c sƒ© %s s·∫Ω di·ªÖn ra v√†o l√∫c %s.");
                sendNotification(appt.getPatientEntity().getUserEntity().getId(), "üìÖ Nh·∫Øc l·ªãch kh√°m", content);
                count++;
            } catch (Exception e) {
                log.error("L·ªói khi g·ª≠i nh·∫Øc l·ªãch h·∫πn ng√†y mai cho ID: " + appt.getId(), e);
            }
        }

        return count;
    }





    private String buildAppointmentContent(AppointmentEntity appt, String title, String pattern) {
        String patientName = appt.getPatientEntity().getFullName();
        String doctorName = appt.getDoctorEntity().getStaffEntity().getFullName();
        String time = appt.getStartTime().toLocalDateTime().format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));
        return String.format(pattern, patientName, doctorName, time);
    }


    // Th√¥ng b√°o sinh nh·∫≠t
    @Scheduled(cron = "0 0 8 * * *")
    public int sendBirthdayNotifications() {
        LocalDate today = LocalDate.now();

        List<PatientEntity> birthdayPatients = patientRepository.findByBirthDateMonthDay(
                today.getMonthValue(), today.getDayOfMonth());

        int count = 0;

        for (PatientEntity patient : birthdayPatients) {
            try {
                UserEntity user = patient.getUserEntity();
                if (user == null || user.getId() == null) continue;

                String patientName = patient.getFullName();
                String email = patient.getEmail();

                String title = "üéâ Ch√∫c m·ª´ng sinh nh·∫≠t!";
                String content = "Ch√∫c m·ª´ng sinh nh·∫≠t " + patientName +
                        "! Ch√∫c b·∫°n m·ªôt ng√†y th·∫≠t vui v·∫ª v√† nhi·ªÅu s·ª©c kh·ªèe üíñ";

                sendNotification(user.getId(), title, content); // Th√¥ng b√°o web

                if (email != null && !email.isBlank()) {
                    String emailSubject = "üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t t·ª´ B·ªánh vi·ªán";
                    String emailContent = "<h3>Ch√†o " + patientName + ",</h3>"
                            + "<p>üéâ Ch√∫c b·∫°n sinh nh·∫≠t th·∫≠t vui v·∫ª, h·∫°nh ph√∫c v√† th√†nh c√¥ng!</p>"
                            + "<p>‚ù§Ô∏è C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng h√†nh c√πng h·ªá th·ªëng c·ªßa ch√∫ng t√¥i.</p>";

                    emailService.sendEmail(email, emailSubject, emailContent);
                }

                count++;
            } catch (Exception e) {
                log.error("L·ªói khi g·ª≠i sinh nh·∫≠t cho " + patient.getFullName(), e);
            }
        }

        return count;
    }





}
