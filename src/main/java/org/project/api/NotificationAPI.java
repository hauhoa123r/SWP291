package org.project.api;


import lombok.RequiredArgsConstructor;
import org.project.entity.UserEntity;
import org.project.model.request.NotificationRequest;
import org.project.model.response.NotificationResponse;
import org.project.repository.UserRepository;
import org.project.service.NotificationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/notifications")
@RequiredArgsConstructor
public class NotificationAPI {

    private final NotificationService notificationService;
    private final UserRepository userRepository;


    // g·ª≠i th√¥ng b√°o thu cong
    @PostMapping("/send")
    public ResponseEntity<String> sendNotification(@RequestBody NotificationRequest request) {
        UserEntity user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));

        notificationService.send(user, request.getTitle(), request.getContent());

        return ResponseEntity.ok("Notification sent successfully");
    }


    //    @GetMapping("/user/{userId}") // my
//    public ResponseEntity<List<NotificationEntity>> getByUser(@PathVariable Long userId) {
//
//        //        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        //        String email = auth.getName(); // username t·ª´ token
//        //        UserEntity user = userRepository.findByUsername(username).orElseThrow();
//
//        return ResponseEntity.ok(notificationService.getAllByUserId(userId));
//
//    }
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<NotificationResponse>> getByUserId(@PathVariable Long userId) {
        List<NotificationResponse> notifications = notificationService.getAllByUserId(userId);
        return ResponseEntity.ok(notifications);
    }

    // Th√¥ng b√°o ƒë·∫∑t l·ªãch
    @PostMapping("/appointment/{id}/notify")
    public ResponseEntity<String> notifyAppointment(@PathVariable("id") Long appointmentId) {
        notificationService.sendAppointmentNotification(appointmentId);
        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o x√°c nh·∫≠n ƒë·∫∑t l·ªãch th√†nh c√¥ng.");
    }

    // Th√¥ng b√°o thay ƒë·ªïi l·ªãch
    @PostMapping("/appointment/{id}/change")
    public ResponseEntity<String> notifyAppointmentChange(@PathVariable("id") Long appointmentId) {
        notificationService.sendAppointmentChangeNotification(appointmentId);
        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o thay ƒë·ªïi l·ªãch h·∫πn.");
    }

    // Th√¥ng b√°o h·ªßy l·ªãch
    @PostMapping("/appointment/{id}/cancel")
    public ResponseEntity<String> notifyAppointmentCancel(@PathVariable("id") Long appointmentId) {
        notificationService.sendAppointmentCancelNotification(appointmentId);
        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o h·ªßy l·ªãch h·∫πn.");
    }


    // Th√¥ng b√°o sinh nh·∫≠t
    @GetMapping("/remind-birthday")
    public ResponseEntity<String> sendBirthdayReminders() {
        int count = notificationService.sendBirthdayNotifications();
        return ResponseEntity.ok("ƒê√£ g·ª≠i sinh nh·∫≠t cho " + count + " b·ªánh nh√¢n h√¥m nay.");
    }

    // Th√¥ng b√°o nh·∫Øc tr∆∞·ªõc 1 ng√†y
    @GetMapping("/remind-tomorrow")
    public ResponseEntity<String> sendReminderForTomorrowAppointments() {
        int count = notificationService.sendTomorrowAppointmentReminders();
        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o nh·∫Øc l·ªãch cho " + count + " cu·ªôc h·∫πn ng√†y mai.");
    }

    // Th√¥ng b√°o k·∫øt qu·∫£
//    @PostMapping("/appointment/{id}/lab-result")
//    public ResponseEntity<String> notifyLabResult(@PathVariable("id") Long appointmentId) {
//        // G·ªçi ph∆∞∆°ng th·ª©c c·ªßa NotificationService ƒë·ªÉ g·ª≠i th√¥ng b√°o k·∫øt qu·∫£ x√©t nghi·ªám
//        boolean isSent = notificationService.sendLabResultNotification(appointmentId);
//
//        if (isSent) {
//            return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o k·∫øt qu·∫£ x√©t nghi·ªám.");
//        } else {
//            return ResponseEntity.ok("Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám ƒë·ªÉ g·ª≠i.");
//        }
//    }


    // Th√¥ng b√°o k·∫øt qu·∫£
//    @PostMapping("/appointment/{id}/lab-result")
//    public ResponseEntity<String> notifyLabResult(@PathVariable("id") Long appointmentId) {
//        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
//                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));
//
//        PatientEntity patient = appt.getPatientEntity();
//        UserEntity user = patient.getUserEntity();
//        StaffEntity doctor = appt.getDoctorEntity().getStaffEntity();
//
//        // L·∫•y c√°c test_request_item c√≥ result kh√¥ng null
//        List<TestRequestEntity> testRequests = testRequestRepository.findByAppointmentId(appointmentId);
//
//        boolean hasResult = false;
//
//        for (TestRequestEntity testRequest : testRequests) {
//            List<TestRequestItemEntity> items = testRequestItemRepository.findByTestRequestId(testRequest.getId());
//            for (TestRequestItemEntity item : items) {
//                if (item.getResult() != null && !item.getResult().isBlank()) {
//                    hasResult = true;
//                    break;
//                }
//            }
//            if (hasResult) break;
//        }
//
//        if (!hasResult) {
//            return ResponseEntity.ok("Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám ƒë·ªÉ g·ª≠i.");
//        }
//
//        String doctorName = doctor.getFullName();
//        String patientName = patient.getFullName();
//
//        String title = "üß™ ƒê√£ c√≥ k·∫øt qu·∫£ x√©t nghi·ªám";
//        String content = "B·ªánh nh√¢n " + patientName + " ƒë√£ c√≥ k·∫øt qu·∫£ x√©t nghi·ªám t·ª´ b√°c sƒ© " + doctorName + ".";
//
//        notificationService.sendNotification(user.getId(), title, content);
//
//        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o k·∫øt qu·∫£ x√©t nghi·ªám.");
//    }

}
